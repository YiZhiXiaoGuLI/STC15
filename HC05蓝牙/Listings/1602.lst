C51 COMPILER V9.56.0.0   1602                                                              07/28/2017 20:48:37 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE 1602
OBJECT MODULE PLACED IN .\Objects\1602.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_C51\C51\BIN\C51.EXE 1602.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\1602.lst) TABS(2) OBJECT(.\Objects\1602.obj)

line level    source

   1          
   2          #include <intrins.h>
   3          #include <1602.h>
   4          
   5          #define MAIN_Fosc   22118400L 
   6          #define LineLength  16    //16x2
   7          
   8          /*************  Pin define  *****************************************************/
   9          
  10          sfr   LCD_BUS = 0x80; //P0--0x80, P1--0x90, P2--0xA0, P3--0xB0
  11          
  12          sbit  LCD_B7  = LCD_BUS^7;  //D7 -- Pin 14    LED- -- Pin 16 
  13          sbit  LCD_B6  = LCD_BUS^6;  //D6 -- Pin 13    LED+ -- Pin 15
  14          sbit  LCD_B5  = LCD_BUS^5;  //D5 -- Pin 12    Vo   -- Pin 3
  15          sbit  LCD_B4  = LCD_BUS^4;  //D4 -- Pin 11    VDD  -- Pin 2
  16          sbit  LCD_B3  = LCD_BUS^3;  //D3 -- Pin 10    VSS  -- Pin 1
  17          sbit  LCD_B2  = LCD_BUS^2;  //D2 -- Pin  9
  18          sbit  LCD_B1  = LCD_BUS^1;  //D1 -- Pin  8
  19          sbit  LCD_B0  = LCD_BUS^0;  //D0 -- Pin  7
  20          
  21          sbit  LCD_ENA = P2^7; //Pin 6
  22          sbit  LCD_RW  = P2^6; //Pin 5 //LCD_RS   R/W   DB7--DB0        FOUNCTION
  23          sbit  LCD_RS  = P2^5; //Pin 4 //  0   0   INPUT      write the command to LCD model
  24                          //  0   1     OUTPUT     read BF and AC pointer from LCD model
  25                          //  1   0     INPUT      write the data to LCD  model
  26                          //  1   1     OUTPUT     read the data from LCD model
  27          /*
  28          total 2 lines, 16x2= 32
  29          first line address:  0~15
  30          second line address: 64~79
  31          
  32          */
  33          
  34          #define C_CLEAR     0x01    //clear LCD
  35          #define C_HOME      0x02    //cursor go home
  36          #define C_CUR_L     0x04    //cursor shift left after input
  37          #define C_RIGHT     0x05    //picture shift right after input
  38          #define C_CUR_R     0x06    //cursor shift right after input
  39          #define C_LEFT      0x07    //picture shift left after input
  40          #define C_OFF       0x08    //turn off LCD
  41          #define C_ON        0x0C    //turn on  LCD
  42          #define C_FLASH     0x0D    //turn on  LCD, flash 
  43          #define C_CURSOR    0x0E    //turn on  LCD and cursor
  44          #define C_FLASH_ALL   0x0F    //turn on  LCD and cursor, flash
  45          #define C_CURSOR_LEFT 0x10    //single cursor shift left
  46          #define C_CURSOR_RIGHT  0x10    //single cursor shift right
  47          #define C_PICTURE_LEFT  0x10    //single picture shift left
  48          #define C_PICTURE_RIGHT 0x10    //single picture shift right
  49          #define C_BIT8      0x30    //set the data is 8 bits
  50          #define C_BIT4      0x20    //set the data is 4 bits
  51          #define C_L1DOT7    0x30    //8 bits,one line 5*7  dots
  52          #define C_L1DOT10   0x34    //8 bits,one line 5*10 dots
  53          #define C_L2DOT7    0x38    //8 bits,tow lines 5*7 dots
  54          #define C_4bitL2DOT7  0x28    //4 bits,tow lines 5*7 dots
C51 COMPILER V9.56.0.0   1602                                                              07/28/2017 20:48:37 PAGE 2   

  55          #define C_CGADDRESS0  0x40    //CGRAM address0 (addr=40H+x)
  56          #define C_DDADDRESS0  0x80    //DDRAM address0 (addr=80H+x)
  57          
  58          
  59          #define   LCD_BusData(dat)  LCD_BUS = dat
  60          
  61          void  delay_ms(u8 ms)
  62          {
  63   1           unsigned int i;
  64   1         do{
  65   2              i = MAIN_Fosc / 13000;
  66   2            while(--i)  ;   //14T per loop
  67   2           }while(--ms);
  68   1      }
  69          
  70          void LCD_DelayNop()
  71          {
  72   1        uchar i=15;
  73   1        while(i--)
  74   1        {
  75   2          _nop_();
  76   2        }
  77   1      }
  78          
  79          void  CheckBusy(void)
  80          {
  81   1        u16 i;
  82   1        for(i=0; i<5000; i++) {if(!LCD_B7)  break;}   //check the LCD busy or not. With time out
  83   1      //  while(LCD_B7);      //check the LCD busy or not. Without time out
  84   1      }
  85          
  86          
  87          void IniSendCMD(u8 cmd)
  88          {
  89   1        LCD_RW = 0;
  90   1        LCD_BusData(cmd);
  91   1        LCD_DelayNop();
  92   1        LCD_ENA = 1;
  93   1        LCD_DelayNop();
  94   1        LCD_ENA = 0;
  95   1        LCD_BusData(0xff);
  96   1      }
  97          
  98          void Write_CMD(u8 cmd)
  99          {
 100   1        LCD_RS  = 0;
 101   1        LCD_RW = 1;
 102   1        LCD_BusData(0xff);
 103   1        LCD_DelayNop();
 104   1        LCD_ENA = 1;
 105   1        CheckBusy();      //check the LCD busy or not.
 106   1        LCD_ENA = 0;
 107   1        LCD_RW = 0;
 108   1        
 109   1        LCD_BusData(cmd);
 110   1        LCD_DelayNop();
 111   1        LCD_ENA = 1;
 112   1        LCD_DelayNop();
 113   1        LCD_ENA = 0;
 114   1        LCD_BusData(0xff);
 115   1      }
 116          
C51 COMPILER V9.56.0.0   1602                                                              07/28/2017 20:48:37 PAGE 3   

 117          
 118          void Write_DIS_Data(u8 dat)
 119          {
 120   1        LCD_RS = 0;
 121   1        LCD_RW = 1;
 122   1      
 123   1        LCD_BusData(0xff);
 124   1        LCD_DelayNop();
 125   1        LCD_ENA = 1;
 126   1        CheckBusy();      //check the LCD busy or not.
 127   1        LCD_ENA = 0;
 128   1        LCD_RW = 0;
 129   1        LCD_RS  = 1;
 130   1      
 131   1        LCD_BusData(dat);
 132   1        LCD_DelayNop();
 133   1        LCD_ENA = 1;
 134   1        LCD_DelayNop();
 135   1        LCD_ENA = 0;
 136   1        LCD_BusData(0xff);
 137   1      }
 138          
 139          
 140          
 141          
 142          void ClearLine(u8 row)
 143          {
 144   1        u8 i;
 145   1        Write_CMD(((row & 1) << 6) | 0x80);
 146   1        for(i=0; i<LineLength; i++) Write_DIS_Data(' ');
 147   1      }
 148          
 149          
 150          void  WriteChar(u8 row, u8 column, u8 dat)
 151          {
 152   1        Write_CMD((((row & 1) << 6) + column) | 0x80);
 153   1        Write_DIS_Data(dat);
 154   1      }
 155          
 156          void PutString(u8 row, u8 column, u8 *puts)
 157          {
 158   1        Write_CMD((((row & 1) << 6) + column) | 0x80);
 159   1        for ( ;  *puts != 0;  puts++)   
 160   1        {
 161   2          Write_DIS_Data(*puts);
 162   2          if(++column >= LineLength)  break;
 163   2        }
 164   1      }
 165          
 166          void Initialize_LCD(void)
 167          {
 168   1        LCD_ENA = 0;
 169   1        LCD_RS  = 0;
 170   1        LCD_RW = 0;
 171   1      
 172   1        delay_ms(20);
 173   1        IniSendCMD(C_BIT8);   //set the data is 8 bits
 174   1      
 175   1        delay_ms(10);
 176   1        Write_CMD(C_L2DOT7);    //tow lines 5*7 dots
 177   1      
 178   1        delay_ms(6);
C51 COMPILER V9.56.0.0   1602                                                              07/28/2017 20:48:37 PAGE 4   

 179   1        Write_CMD(C_CLEAR);   //clear LCD RAM
 180   1        Write_CMD(C_CUR_R);   //Curror Shift Right
 181   1        Write_CMD(0x06);
 182   1        Write_CMD(C_ON);    //turn on  LCD
 183   1        
 184   1        ClearLine(0);
 185   1        ClearLine(1);
 186   1      }
 187          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    263    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
