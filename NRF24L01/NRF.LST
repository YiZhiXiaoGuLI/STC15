C51 COMPILER V9.00   NRF                                                                   08/26/2013 19:59:03 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE NRF
OBJECT MODULE PLACED IN NRF.OBJ
COMPILER INVOKED BY: d:\Keil\C51\BIN\C51.EXE NRF.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include "reg52.h"
   2          #include "intrins.h"
   3          #include "12864.h"
   4          #include "temp.h"
   5          
   6          
   7          #define uchar unsigned char
   8          #define uint unsigned int
   9          
  10          uchar Rxstr1[4];
  11          //****************************************NRF24L01端口定义***************************************
  12          sbit    MISO    =P3^7;
  13          sbit    MOSI    =P3^6;
  14          sbit    SCK             =P3^5;
  15          sbit    CSN             =P3^4;
  16          sbit    CE              =P2^2; 
  17          sbit    IRQ             =P3^3;
  18          
  19          //******************************************************************************************
  20          uint    bdata sta;                              //NRF24L01状态标志
  21          sbit    RX_DR   =sta^6;                         
  22          sbit    TX_DS   =sta^5;
  23          sbit    MAX_RT  =sta^4;
  24          //*************************************NRF24L01**************************************************
  25          
  26          #define TX_ADR_WIDTH    5       // 本机地址宽度设置
  27          #define RX_ADR_WIDTH    5       // 接收方地址宽度设置
  28          
  29          #define TX_PLOAD_WIDTH  5               // 4 字节数据长度
  30          #define RX_PLOAD_WIDTH  5               // 4 字节数据长度
  31          
  32          uchar const TX_ADDRESS[TX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};       //本地地址
  33          uchar const RX_ADDRESS[RX_ADR_WIDTH]= {0x34,0x43,0x10,0x10,0x01};       //接收地址
  34          
  35          //*****************************NRF24L01寄存器指令，详细请对照，Page18******************************
  36          
  37          #define READ_REG        0x00    // 读寄存器指令
  38          #define WRITE_REG       0x20    // 写寄存器指令
  39          #define RD_RX_PLOAD     0x61    // 读取接收数据指令
  40          #define WR_TX_PLOAD     0xA0    // 写待发数据指令
  41          #define FLUSH_TX        0xE1    // 冲洗发送 FIFO指令
  42          #define FLUSH_RX        0xE2    // 冲洗接收 FIFO指令
  43          #define REUSE_TX_PL     0xE3    // 定义重复装载数据指令
  44          #define NOP             0xFF    // 保留
  45          //****************************SPI(nRF24L01)寄存器地址，详细请对照，Page18-24**********************
  46          
  47          #define CONFIG          0x00   // 配置收发状态，CRC校验模式以及收发状态响应方式
  48          #define EN_AA           0x01   // 自动应答功能设置
  49          #define EN_RXADDR       0x02   // 可用信道设置
  50          #define SETUP_AW        0x03   // 收发地址宽度设置
  51          #define SETUP_RETR      0x04   // 自动重发功能设置
  52          #define RF_CH           0x05   // 工作频率设置
  53          #define RF_SETUP        0x06   // 发射速率、功耗功能设置
  54          #define STATUS          0x07   // 状态寄存器
  55          #define OBSERVE_TX      0x08   // 发送监测功能
C51 COMPILER V9.00   NRF                                                                   08/26/2013 19:59:03 PAGE 2   

  56          #define CD              0x09   // 地址检测           
  57          #define RX_ADDR_P0      0x0A   // 频道0接收数据地址
  58          #define RX_ADDR_P1      0x0B   // 频道1接收数据地址
  59          #define RX_ADDR_P2      0x0C   // 频道2接收数据地址
  60          #define RX_ADDR_P3      0x0D   // 频道3接收数据地址
  61          #define RX_ADDR_P4      0x0E   // 频道4接收数据地址
  62          #define RX_ADDR_P5      0x0F   // 频道5接收数据地址
  63          #define TX_ADDR         0x10   // 发送地址寄存器
  64          #define RX_PW_P0        0x11   // 接收频道0接收数据长度
  65          #define RX_PW_P1        0x12   // 接收频道0接收数据长度
  66          #define RX_PW_P2        0x13   // 接收频道0接收数据长度
  67          #define RX_PW_P3        0x14   // 接收频道0接收数据长度
  68          #define RX_PW_P4        0x15   // 接收频道0接收数据长度
  69          #define RX_PW_P5        0x16   // 接收频道0接收数据长度
  70          #define FIFO_STATUS     0x17   // FIFO栈入栈出状态寄存器设置
  71          //************************************NRF24L01函数申明**********************************************
  72          
  73          void inerDelay_us(unsigned char n);
  74          void init_NRF24L01(void);
  75          uint SPI_RW(uint uchars);
  76          uchar SPI_Read(uchar reg);
  77          
  78          void SetRX_Mode(void);
  79          uint SPI_RW_Reg(uchar reg, uchar value);
  80          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars);
  81          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars);
  82          unsigned char nRF24L01_RxPacket(unsigned char* rx_buf);
  83          void nRF24L01_TxPacket(unsigned char * tx_buf);
  84          /******************************************************************************************
  85          /*延时函数
  86          /******************************************************************************************/
  87          void inerDelay_us(unsigned char n)
  88          {
  89   1              for(;n>0;n--)
  90   1                      _nop_();
  91   1      }
  92          //****************************************************************************************
  93          /*NRF24L01初始化
  94          //***************************************************************************************/
  95          void init_NRF24L01(void)
  96          {
  97   1          inerDelay_us(100);
  98   1              CE=0;    // chip enable
  99   1              CSN=1;   // Spi disable 
 100   1              SCK=0;   // Spi clock line init high
 101   1              IRQ=1;
 102   1              //SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);    // 写本地地址
 103   1          //SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS1, TX_ADR_WIDTH);            
 104   1              //SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH); // 写接收端地址
 105   1              SPI_RW_Reg(WRITE_REG + EN_AA, 0x01);      //  频道0自动 ACK应答允许     
 106   1              SPI_RW_Reg(WRITE_REG + EN_RXADDR, 0x01);  //  允许接收地址只有频道0，如果需要多频道可以参考Page21 
 107   1              SPI_RW_Reg(WRITE_REG + SETUP_AW, 0x03); 
 108   1              SPI_RW_Reg(WRITE_REG + SETUP_RETR, 0x00);
 109   1              SPI_RW_Reg(WRITE_REG + RF_CH, 1);        //   设置信道工作为2.4GHZ，收发必须一致
 110   1              SPI_RW_Reg(WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH); //设置接收数据长度，本次设置为4字节
 111   1              SPI_RW_Reg(WRITE_REG + RF_SETUP, 0x07);                 //设置发射速率为1Mkbps，发射功率为最大值0dB
 112   1              CE=1;
 113   1              inerDelay_us(200);
 114   1      }
 115          /****************************************************************************************************
 116          /*函数：uint SPI_RW(uint uchar)
 117          /*功能：NRF24L01的SPI写时序,详细看时序图，Page19
C51 COMPILER V9.00   NRF                                                                   08/26/2013 19:59:03 PAGE 3   

 118          /****************************************************************************************************/
 119          uint SPI_RW(uint uchars)
 120          {
 121   1              uint bit_ctr;
 122   1              for(bit_ctr=0;bit_ctr<8;bit_ctr++) // output 8-bit
 123   1              {
 124   2                      MOSI = (uchars & 0x80);         // output 'uchar', MSB to MOSI
 125   2                      uchars = (uchars<< 1);           // shift next bit into MSB..
 126   2                      SCK = 1;                      // Set SCK high..
 127   2                      uchars |= MISO;                   // capture current MISO bit
 128   2                      SCK = 0;                          // ..then set SCK low again
 129   2              }
 130   1          return(uchars);                       // return read uchar
 131   1      }
 132          /****************************************************************************************************
 133          /*函数：uchar SPI_Read(uchar reg)
 134          /*功能：NRF24L01的SPI时序,详细看时序图，Page19
 135          /****************************************************************************************************/
 136          uchar SPI_Read(uchar reg)
 137          {
 138   1              uchar reg_val;
 139   1              
 140   1              CSN = 0;                // CSN low, initialize SPI communication...
 141   1              SPI_RW(reg);            // Select register to read from..
 142   1              reg_val = SPI_RW(0);    // ..then read registervalue
 143   1              CSN = 1;                // CSN high, terminate SPI communication
 144   1              
 145   1              return(reg_val);        // return register value
 146   1      }
 147          /****************************************************************************************************/
 148          /*功能：NRF24L01读写寄存器函数,
 149          /****************************************************************************************************/
 150          uint SPI_RW_Reg(uchar reg, uchar value)
 151          {
 152   1              uint status;
 153   1              
 154   1              CSN = 0;                   // CSN low, init SPI transaction
 155   1              status = SPI_RW(reg);      // select register
 156   1              SPI_RW(value);             // ..and write value to it..
 157   1              CSN = 1;                   // CSN high again
 158   1              
 159   1              return(status);            // return nRF24L01 status uchar
 160   1      }
 161          /****************************************************************************************************/
 162          /*函数：uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 163          /*功能: 用于读数据，reg：为寄存器地址，pBuf：为待读出数据地址，uchars：读出数据的个数
 164          /****************************************************************************************************/
 165          uint SPI_Read_Buf(uchar reg, uchar *pBuf, uchar uchars)
 166          {
 167   1              uint status,uchar_ctr;
 168   1              
 169   1              CSN = 0;                                // Set CSN low, init SPI tranaction
 170   1              status = SPI_RW(reg);                   // Select register to write to and read status uchar
 171   1              
 172   1              for(uchar_ctr=0;uchar_ctr<uchars;uchar_ctr++)
 173   1                      pBuf[uchar_ctr] = SPI_RW(0);    // 
 174   1              
 175   1              CSN = 1;                           
 176   1              
 177   1              return(status);                    // return nRF24L01 status uchar
 178   1      }
 179          /*********************************************************************************************************
C51 COMPILER V9.00   NRF                                                                   08/26/2013 19:59:03 PAGE 4   

 180          /*函数：uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 181          /*功能: 用于写数据：为寄存器地址，pBuf：为待写入数据地址，uchars：写入数据的个数
 182          /*********************************************************************************************************
             -/
 183          uint SPI_Write_Buf(uchar reg, uchar *pBuf, uchar uchars)
 184          {
 185   1              uint status,uchar_ctr;
 186   1              
 187   1              CSN = 0;            //SPI使能       
 188   1              status = SPI_RW(reg);   
 189   1              for(uchar_ctr=0; uchar_ctr<uchars; uchar_ctr++) //
 190   1              SPI_RW(*pBuf++);
 191   1              CSN = 1;           //关闭SPI
 192   1              return(status);    // 
 193   1      }
 194          /*函数：void SetRX_Mode(void)
 195          /*功能：数据接收配置 
 196          /****************************************************************************************************/
 197          void SetRX_Mode(void)
 198          {
 199   1              CE=0;
 200   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0f);                   // IRQ收发完成中断响应，16位CRC ，主接收
 201   1              CE = 1; 
 202   1              inerDelay_us(200);
 203   1      }
 204          /******************************************************************************************************/
 205          /*函数：unsigned char nRF24L01_RxPacket(unsigned char* rx_buf)
 206          /*功能：数据读取后放如rx_buf接收缓冲区中
 207          /******************************************************************************************************/
 208          unsigned char nRF24L01_RxPacket(unsigned char*rx_buf)
 209          {
 210   1          unsigned char revale=0;
 211   1              SPI_Write_Buf(WRITE_REG + TX_ADDR, TX_ADDRESS, TX_ADR_WIDTH);
 212   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, RX_ADDRESS, RX_ADR_WIDTH);
 213   1              sta=SPI_Read(STATUS);   // 读取状态寄存其来判断数据接收状况
 214   1              if(sta&0x40)                            // 判断是否接收到数据
 215   1              {               
 216   2                  CE=0;                       
 217   2                  SPI_Read_Buf(RD_RX_PLOAD,rx_buf,TX_PLOAD_WIDTH);// read receive payload from RX_FIFO buffer
 218   2                      revale =1;
 219   2                      CE=1;
 220   2                      CSN=0;
 221   2                      SPI_RW(FLUSH_RX);
 222   2                      CSN=1;
 223   2                      //SPI_RW_Reg(WRITE_REG+STATUS,0XFF);                    //读取数据完成标志
 224   2              }
 225   1              SPI_RW_Reg(WRITE_REG+STATUS,0XFF);   //接收到数据后RX_DR,TX_DS,MAX_PT都置高为1，通过写1来其清除中断标志
 226   1              return revale;
 227   1      }
 228          /*********************************************************************************************************
             -**
 229          /*函数：void nRF24L01_TxPacket(unsigned char * tx_buf)
 230          /*功能：发送 tx_buf中数据
 231          /*********************************************************************************************************
             -*/
 232          void nRF24L01_TxPacket(unsigned char * tx_buf)
 233          {
 234   1              CE=0;                   //StandBy I模式 
 235   1              SPI_Write_Buf(WRITE_REG + RX_ADDR_P0, TX_ADDRESS, TX_ADR_WIDTH); // 装载接收端地址
 236   1              SPI_Write_Buf(WR_TX_PLOAD, tx_buf, TX_PLOAD_WIDTH);                      // 装载数据    
 237   1              SPI_RW_Reg(WRITE_REG + CONFIG, 0x0e);                    // IRQ收发完成中断响应，16位CRC，主发送
 238   1              CE=1;            //置高CE，激发数据发送
C51 COMPILER V9.00   NRF                                                                   08/26/2013 19:59:03 PAGE 5   

 239   1              inerDelay_us(10);
 240   1      }
 241          
 242          
 243          void send( char *str)
 244          {
 245   1              CSN=0;
 246   1              SPI_RW(FLUSH_RX);
 247   1              CSN=1;
 248   1              nRF24L01_TxPacket(str); // Transmit Tx buffer data
 249   1              SPI_RW_Reg(WRITE_REG+STATUS,0XFF);      
 250   1      }
 251          
 252          void receive()
 253          {
 254   1              SetRX_Mode();
 255   1              nRF24L01_RxPacket(Rxstr1);
 256   1      }
 257          
 258          
 259          
 260          void main()
 261          {
 262   1              init12864();
 263   1              init_NRF24L01();
 264   1              while(1)
 265   1              {
 266   2                      change();
 267   2                      display_string(0,1,"本机温度：");
 268   2                      display_onchar(0,2,s[0]);
 269   2                      display_onchar(1,2,s[1]);
 270   2                      display_onchar(2,2,s[2]);
 271   2                      display_onchar(3,2,s[3]);
 272   2                      display_onchar(4,2,'C');
 273   2      
 274   2                      send(s);
 275   2                      
 276   2                      receive();
 277   2                      
 278   2                      display_string(0,3,"其他温度：");
 279   2                      display_onchar(0,4,Rxstr1[0]);
 280   2                      display_onchar(1,4,Rxstr1[1]);
 281   2                      display_onchar(2,4,Rxstr1[2]);
 282   2                      display_onchar(3,4,Rxstr1[3]);
 283   2                      display_onchar(4,4,'C');
 284   2                      
 285   2              
 286   2              }
 287   1      
 288   1      
 289   1      }
 290          
 291          
 292          
 293          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1260    ----
   CONSTANT SIZE    =     22    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.00   NRF                                                                   08/26/2013 19:59:03 PAGE 6   

   DATA SIZE        =     26      31
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
