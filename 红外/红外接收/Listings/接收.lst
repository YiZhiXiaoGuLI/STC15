C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE ____
OBJECT MODULE PLACED IN .\Objects\接收.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil_C51\C51\BIN\C51.EXE 接收.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND 
                    -PRINT(.\Listings\接收.lst) TABS(2) OBJECT(.\Objects\接收.obj)

line level    source

   1          
   2          /*************  本程序功能说明  **************
   3          
   4          红外接收程序。适用于市场上用量最大的NEC编码。
   5          
   6          应用层查询 B_IR_Press标志为,则已接收到一个键码放在IR_code中, 处理完键码后， 用户程序清除B_IR_Press标志.
   7          
   8          数码管左起4位显示用户码, 最右边两位显示数据, 均为十六进制.
   9          
  10          ******************************************/
  11          
  12          
  13          #include    "1602.h"
  14          
  15          #define     MAIN_Fosc       11059200L   //定义主时钟
  16          
  17          
  18          sfr TH2  = 0xD6;
  19          sfr TL2  = 0xD7;
  20          sfr IE2   = 0xAF;
  21          sfr INT_CLKO = 0x8F;
  22          sfr AUXR = 0x8E;
  23          sfr AUXR1 = 0xA2;
  24          sfr P_SW1 = 0xA2;
  25          sfr P_SW2 = 0xBA;
  26          sfr S2CON = 0x9A;
  27          sfr S2BUF = 0x9B;
  28          
  29          sfr ADC_CONTR = 0xBC;   //带AD系列
  30          sfr ADC_RES   = 0xBD;   //带AD系列
  31          sfr ADC_RESL  = 0xBE;   //带AD系列
  32          sfr P1ASF = 0x9D;   //只写，模拟输入(AD或LVD)选择
  33          
  34          sfr P4   = 0xC0;
  35          sfr P5   = 0xC8;
  36          sfr P6   = 0xE8;
  37          sfr P7   = 0xF8;
  38          sfr P1M1 = 0x91;    //PxM1.n,PxM0.n     =00--->Standard,    01--->push-pull
  39          sfr P1M0 = 0x92;    //                  =10--->pure input,  11--->open drain
  40          sfr P0M1 = 0x93;
  41          sfr P0M0 = 0x94;
  42          sfr P2M1 = 0x95;
  43          sfr P2M0 = 0x96;
  44          sfr P3M1 = 0xB1;
  45          sfr P3M0 = 0xB2;
  46          sfr P4M1 = 0xB3;
  47          sfr P4M0 = 0xB4;
  48          sfr P5M1 = 0xC9;
  49          sfr P5M0 = 0xCA;
  50          sfr P6M1 = 0xCB;
  51          sfr P6M0 = 0xCC;
  52          sfr P7M1 = 0xE1;
  53          sfr P7M0 = 0xE2;
  54          
C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 2   

  55          sbit P00 = P0^0;
  56          sbit P01 = P0^1;
  57          sbit P02 = P0^2;
  58          sbit P03 = P0^3;
  59          sbit P04 = P0^4;
  60          sbit P05 = P0^5;
  61          sbit P06 = P0^6;
  62          sbit P07 = P0^7;
  63          sbit P10 = P1^0;
  64          sbit P11 = P1^1;
  65          sbit P12 = P1^2;
  66          sbit P13 = P1^3;
  67          sbit P14 = P1^4;
  68          sbit P15 = P1^5;
  69          sbit P16 = P1^6;
  70          sbit P17 = P1^7;
  71          sbit P20 = P2^0;
  72          sbit P21 = P2^1;
  73          sbit P22 = P2^2;
  74          sbit P23 = P2^3;
  75          sbit P24 = P2^4;
  76          sbit P25 = P2^5;
  77          sbit P26 = P2^6;
  78          sbit P27 = P2^7;
  79          sbit P30 = P3^0;
  80          sbit P31 = P3^1;
  81          sbit P32 = P3^2;
  82          sbit P33 = P3^3;
  83          sbit P34 = P3^4;
  84          sbit P35 = P3^5;
  85          sbit P36 = P3^6;
  86          sbit P37 = P3^7;
  87          sbit P40 = P4^0;
  88          sbit P41 = P4^1;
  89          sbit P42 = P4^2;
  90          sbit P43 = P4^3;
  91          sbit P44 = P4^4;
  92          sbit P45 = P4^5;
  93          sbit P46 = P4^6;
  94          sbit P47 = P4^7;
  95          sbit P50 = P5^0;
  96          sbit P51 = P5^1;
  97          sbit P52 = P5^2;
  98          sbit P53 = P5^3;
  99          sbit P54 = P5^4;
 100          sbit P55 = P5^5;
 101          sbit P56 = P5^6;
 102          sbit P57 = P5^7;
 103          
 104          #define SysTick     10000       // 次/秒, 系统滴答频率, 在4000~16000之间
 105          
 106          /***********************************************************/
 107          
 108          #define DIS_DOT     0x20
 109          #define DIS_BLACK   0x10
 110          #define DIS_        0x11
 111          
 112          
 113          /****************************** 自动定义宏 ***********************************/
 114          
 115          #define Timer0_Reload   (65536UL - ((MAIN_Fosc + SysTick/2) / SysTick))     //Timer 0 中断频率, 在config.h
             -中指定系统滴答频率, 在4000~16000之间.
C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 3   

 116          
 117          /*****************************************************************************/
 118          
 119          
 120          
 121          
 122          
 123          /*************  本地常量声明    **************/
 124          u8 code t_display[]={                       //标准字库
 125          //   0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
 126              0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71,
 127          //black  -     H    J    K    L    N    o   P    U     t    G    Q    r   M    y
 128              0x00,0x40,0x76,0x1E,0x70,0x38,0x37,0x5C,0x73,0x3E,0x78,0x3d,0x67,0x50,0x37,0x6e,
 129              0xBF,0x86,0xDB,0xCF,0xE6,0xED,0xFD,0x87,0xFF,0xEF,0x46};    //0. 1. 2. 3. 4. 5. 6. 7. 8. 9. -1
 130          
 131          u8 code T_COM[]={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};      //位码
 132          
 133          
 134          /*************  IO口定义    **************/
 135          sbit    P_HC595_SER   = P4^0;   //pin 14    SER     data input
 136          sbit    P_HC595_RCLK  = P5^4;   //pin 12    RCLk    store (latch) clock
 137          sbit    P_HC595_SRCLK = P4^3;   //pin 11    SRCLK   Shift data clock
 138          
 139          /*************  本地变量声明    **************/
 140          
 141          u8  LED8[8];        //显示缓冲
 142          u8  display_index;  //显示位索引
 143          bit B_1ms;          //1ms标志
 144          
 145          u8  cnt_1ms;        //1ms基本计时
 146          
 147          
 148          /*************  红外接收程序变量声明    **************/
 149          sbit    P_IR_RX = P3^6;         //定义红外接收输入IO口
 150          
 151          u8  IR_SampleCnt;       //采样计数
 152          u8  IR_BitCnt;          //编码位数
 153          u8  IR_UserH;           //用户码(地址)高字节
 154          u8  IR_UserL;           //用户码(地址)低字节
 155          u8  IR_data;            //数据原码
 156          u8  IR_DataShit;        //数据移位
 157          
 158          bit P_IR_RX_temp;       //Last sample
 159          bit B_IR_Sync;          //已收到同步标志
 160          bit B_IR_Press;         //安键动作发生
 161          u8  IR_code;            //红外键码
 162          u16 UserCode;           //用户码
 163          
 164          /*********************************/
 165          
 166          void display();
 167          
 168          /********************** 主函数 ************************/
 169          void main(void)
 170          {
 171   1          u8  i;
 172   1      
 173   1          P0M1 = 0;   P0M0 = 0;   //设置为准双向口
 174   1          P1M1 = 0;   P1M0 = 0;   //设置为准双向口
 175   1          P2M1 = 0;   P2M0 = 0;   //设置为准双向口
 176   1          P3M1 = 0;   P3M0 = 0;   //设置为准双向口
 177   1          P4M1 = 0;   P4M0 = 0;   //设置为准双向口
C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 4   

 178   1          P5M1 = 0;   P5M0 = 0;   //设置为准双向口
 179   1          P6M1 = 0;   P6M0 = 0;   //设置为准双向口
 180   1          P7M1 = 0;   P7M0 = 0;   //设置为准双向口
 181   1        
 182   1          Initialize_LCD();
 183   1          
 184   1          display_index = 0;
 185   1      
 186   1          AUXR = 0x80;    //Timer0 set as 1T, 16 bits timer auto-reload, 
 187   1          TH0 = (u8)(Timer0_Reload / 256);
 188   1          TL0 = (u8)(Timer0_Reload % 256);
 189   1          ET0 = 1;    //Timer0 interrupt enable
 190   1          TR0 = 1;    //Tiner0 run
 191   1      
 192   1          cnt_1ms = SysTick / 1000;
 193   1          EA = 1;     //打开总中断
 194   1          
 195   1          
 196   1          for(i=0; i<8; i++)  LED8[i] = DIS_;
 197   1          LED8[4] = DIS_BLACK;
 198   1          LED8[5] = DIS_BLACK;
 199   1      
 200   1          while(1)
 201   1          {
 202   2              if(B_1ms)   //1ms到
 203   2              {
 204   3                  B_1ms = 0;
 205   3                  
 206   3                  if(B_IR_Press)      //检测到收到红外键码
 207   3                  {
 208   4                      B_IR_Press = 0;
 209   4                      
 210   4                      LED8[0] = (u8)((UserCode >> 12) & 0x0f);    //用户码高字节的高半字节
 211   4                      LED8[1] = (u8)((UserCode >> 8)  & 0x0f);    //用户码高字节的低半字节
 212   4                      LED8[2] = (u8)((UserCode >> 4)  & 0x0f);    //用户码低字节的高半字节
 213   4                      LED8[3] = (u8)(UserCode & 0x0f);            //用户码低字节的低半字节
 214   4                      LED8[6] = IR_code >> 4;
 215   4                      LED8[7] = IR_code & 0x0f;
 216   4                  }
 217   3              }
 218   2              display();
 219   2          }
 220   1      } 
 221          /**********************************************/
 222          
 223          
 224          
 225          void display()
 226          {
 227   1        PutString(0,0,"User:");
 228   1        PutString(1,0,"Temp:");
 229   1        WriteChar(0,6,UserCode/256+'0');
 230   1        WriteChar(1,6,IR_code+'0');
 231   1      }
 232          
 233          /**************** 向HC595发送一个字节函数 ******************/
 234          void Send_595(u8 dat)
 235          {       
 236   1          u8  i;
 237   1          for(i=0; i<8; i++)
 238   1          {
 239   2              dat <<= 1;
C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 5   

 240   2              P_HC595_SER   = CY;
 241   2              P_HC595_SRCLK = 1;
 242   2              P_HC595_SRCLK = 0;
 243   2          }
 244   1      }
 245          
 246          /********************** 显示扫描函数 ************************/
 247          void DisplayScan(void)
 248          {   
 249   1          Send_595(~T_COM[display_index]);                //输出位码
 250   1          Send_595(t_display[LED8[display_index]]);   //输出段码
 251   1      
 252   1          P_HC595_RCLK = 1;
 253   1          P_HC595_RCLK = 0;                           //锁存输出数据
 254   1          if(++display_index >= 8)    display_index = 0;  //8位结束回0
 255   1      }
 256          
 257          
 258          
 259          //*******************************************************************
 260          //*********************** IR Remote Module **************************
 261          //*********************** By  (Coody) 2002-8-24 *********************
 262          //*********************** IR Remote Module **************************
 263          //this programme is used for Receive IR Remote (NEC Code).
 264          
 265          //data format: Synchro, AddressH, AddressL, data, /data, (total 32 bit).
 266          
 267          //send a frame(85ms), pause 23ms, send synchro of continue frame, pause 94ms
 268          
 269          //data rate: 108ms/Frame
 270          
 271          
 272          //Synchro: low=9ms, high=4.5 / 2.25ms, low=0.5626ms
 273          //Bit0: high=0.5626ms, low=0.5626ms
 274          //Bit1: high=1.6879ms, low=0.5626ms
 275          //frame rate = 108ms ( pause 23 ms or 96 ms)
 276          
 277          /******************** 红外采样时间宏定义, 用户不要随意修改  *******************/
 278          
 279          #define IR_SAMPLE_TIME      (1000000UL/SysTick)         //查询时间间隔, us, 红外接收要求在60us~250us之间
 280          #if ((IR_SAMPLE_TIME <= 250) && (IR_SAMPLE_TIME >= 60))
 281              #define D_IR_sample         IR_SAMPLE_TIME      //定义采样时间，在60us~250us之间
 282          #endif
 283          
 284          #define D_IR_SYNC_MAX       (15000/D_IR_sample) //SYNC max time
 285          #define D_IR_SYNC_MIN       (9700 /D_IR_sample) //SYNC min time
 286          #define D_IR_SYNC_DIVIDE    (12375/D_IR_sample) //decide data 0 or 1
 287          #define D_IR_DATA_MAX       (3000 /D_IR_sample) //data max time
 288          #define D_IR_DATA_MIN       (600  /D_IR_sample) //data min time
 289          #define D_IR_DATA_DIVIDE    (1687 /D_IR_sample) //decide data 0 or 1
 290          #define D_IR_BIT_NUMBER     32                  //bit number
 291          
 292          //*******************************************************************************************
 293          //**************************** IR RECEIVE MODULE ********************************************
 294          
 295          void IR_RX_NEC(void)
 296          {
 297   1          u8  SampleTime;
 298   1      
 299   1          IR_SampleCnt++;                         //Sample + 1
 300   1      
 301   1          F0 = P_IR_RX_temp;                      //Save Last sample status
C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 6   

 302   1          P_IR_RX_temp = P_IR_RX;                 //Read current status
 303   1          if(F0 && !P_IR_RX_temp)                 //Pre-sample is high，and current sample is low, so is fall ed
             -ge
 304   1          {
 305   2              SampleTime = IR_SampleCnt;          //get the sample time
 306   2              IR_SampleCnt = 0;                   //Clear the sample counter
 307   2      
 308   2                   if(SampleTime > D_IR_SYNC_MAX)     B_IR_Sync = 0;  //large the Maxim SYNC time, then error
 309   2              else if(SampleTime >= D_IR_SYNC_MIN)                    //SYNC
 310   2              {
 311   3                  if(SampleTime >= D_IR_SYNC_DIVIDE)
 312   3                  {
 313   4                      B_IR_Sync = 1;                  //has received SYNC
 314   4                      IR_BitCnt = D_IR_BIT_NUMBER;    //Load bit number
 315   4                  }
 316   3              }
 317   2              else if(B_IR_Sync)                      //has received SYNC
 318   2              {
 319   3                  if(SampleTime > D_IR_DATA_MAX)      B_IR_Sync=0;    //data samlpe time too large
 320   3                  else
 321   3                  {
 322   4                      IR_DataShit >>= 1;                  //data shift right 1 bit
 323   4                      if(SampleTime >= D_IR_DATA_DIVIDE)  IR_DataShit |= 0x80;    //devide data 0 or 1
 324   4                      if(--IR_BitCnt == 0)                //bit number is over?
 325   4                      {
 326   5                          B_IR_Sync = 0;                  //Clear SYNC
 327   5                          if(~IR_DataShit == IR_data)     //判断数据正反码
 328   5                          {
 329   6                              UserCode = ((u16)IR_UserH << 8) + IR_UserL;
 330   6                              IR_code      = IR_data;
 331   6                              B_IR_Press   = 1;           //数据有效
 332   6                          }
 333   5                      }
 334   4                      else if((IR_BitCnt & 7)== 0)        //one byte receive
 335   4                      {
 336   5                          IR_UserL = IR_UserH;            //Save the User code high byte
 337   5                          IR_UserH = IR_data;             //Save the User code low byte
 338   5                          IR_data  = IR_DataShit;         //Save the IR data byte
 339   5                      }
 340   4                  }
 341   3              }
 342   2          }
 343   1      }
 344          
 345          
 346          /********************** Timer0中断函数 ************************/
 347          void timer0 (void) interrupt 1
 348          {
 349   1      
 350   1          IR_RX_NEC();
 351   1          if(--cnt_1ms == 0)
 352   1          {
 353   2              cnt_1ms = SysTick / 1000;
 354   2              B_1ms = 1;      //1ms标志
 355   2             // DisplayScan();  //1ms扫描显示一位
 356   2          }
 357   1      
 358   1      }
 359          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.56.0.0   ____                                                              08/03/2017 21:44:10 PAGE 7   

   CODE SIZE        =    407    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     19    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
